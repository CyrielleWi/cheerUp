version: 2.1

parameters:
  enable_sentry:
    type: boolean
    default: false

orbs:
  heroku: circleci/heroku@1.2.6

executors:
  defaults_typescript:
    docker:
      - image: circleci/node:14.17
      - image: circleci/postgres:10.6-alpine-ram
        environment:
          POSTGRES_DB: seed
          POSTGRES_USER: seed
          POSTGRES_PASSWORD: Ge0rgesMoustaki
          PGPORT: 5434

commands:
  #  From orb theodo/skip https://circleci.com/developer/orbs/orb/theodo/skip
  skip_unchanged:
    parameters:
      except_branches:
        default: master,main,production
        description: Comma-separated list of git branches where we should never skip tests.
        type: string
      git_base_branch:
        default: origin/main
        description: The branch to compare against when looking for changing.
        type: string
      paths:
        description: The paths to look for changes in.
        type: string
    steps:
      - run:
          command: |
              echo "Skip debugging"
              echo "--------------"
              echo "GIT_BASE_BRANCH=$GIT_BASE_BRANCH"
              echo "PATHS=$PATHS"
              echo "EXCEPT_BRANCHES=$EXCEPT_BRANCHES"

              BRANCH_NAME="$(git rev-parse --abbrev-ref HEAD)"
              echo "BRANCH_NAME=$BRANCH_NAME"

              IFS=' ' read -ra paths_arr \<<< "$PATHS"
              echo "paths_arr=" "${paths_arr[@]}"

              CHANGED_FILES="$(git diff "$GIT_BASE_BRANCH"..."$(git symbolic-ref --short -q HEAD)" --name-only --diff-filter=ACMRT "${paths_arr[@]}")";
              echo "CHANGED_FILES=$CHANGED_FILES"

              if [[ "$EXCEPT_BRANCHES" == *"${BRANCH_NAME}"* ]] || [ -n "${CHANGED_FILES}" ];
              then
                  exit 0;
              fi
              circleci step halt;

          environment:
            EXCEPT_BRANCHES: << parameters.except_branches >>
            GIT_BASE_BRANCH: << parameters.git_base_branch >>
            PATHS: << parameters.paths >>
          name: Skip if no changes to "<< parameters.paths >>"

  checkout_merge:
    parameters:
      base_branch:
        type: string
        default: origin/main
    steps:
      - checkout
      - run:
          name: "Check for conflicts and merge main branch"
          command: |
            git config user.email "circleci@circleci"
            git config user.name "CircleCI"
            git merge << parameters.base_branch >> --no-ff

  yarn-install:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/cheerUp/<< parameters.workspace >>
      - restore_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - save_cache:
          key: node-modules-cache-{{ checksum "<< parameters.workspace >>/yarn.lock" }}
          paths:
            - << parameters.workspace >>/node_modules
      - persist_to_workspace:
          root: ~/cheerUp/<< parameters.workspace >>
          paths:
            - node_modules
            - .env

  yarn-tests:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/cheerUp/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Unit test with coverage
          command: yarn test:coverage
      - store_artifacts:
          path: << parameters.workspace >>/coverage
      - run:
          working_directory: << parameters.workspace >>
          name: Run Typescript checker
          command: yarn tsc

  yarn-linter:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - skip_unchanged:
          paths: << parameters.workspace >>
          git_base_branch: origin/main
      - attach_workspace:
          at: ~/cheerUp/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Run linter
          command: yarn lint
      - store_artifacts:
          path: << parameters.workspace >>/coverage

  yarn-audit:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      # yarn-audit is started with a cron.
      # As such we cannot get the frontend dependencies from the workspace like we do with the other jobs. We need to re-install them.
      - run:
          working_directory: << parameters.workspace >>
          name: Install front dependencies
          command: yarn
      - run:
          working_directory: << parameters.workspace >>
          name: Check dependencies
          command: yarn audit-dependencies

  yarn-build:
    parameters:
      workspace:
        type: string
    steps:
      - checkout_merge
      - attach_workspace:
          at: ~/cheerUp/<< parameters.workspace >>
      - run:
          working_directory: << parameters.workspace >>
          name: Install dependencies
          command: yarn
      - run:
          working_directory: << parameters.workspace >>
          name: Build
          command: yarn build

jobs:
  yarn-install-back:
    executor: defaults_typescript
    working_directory: ~/cheerUp
    steps:
      - yarn-install:
          workspace: backend

  node-tests:
    executor: defaults_typescript
    working_directory: ~/cheerUp
    environment:
      NODE_ENV: test
    steps:
      - yarn-tests:
          workspace: backend

  node-linter:
    executor: defaults_typescript
    working_directory: ~/cheerUp
    environment:
      NODE_ENV: prod
    steps:
      - yarn-linter:
          workspace: backend

  build:
    executor: defaults_typescript
    working_directory: ~/cheerUp
    steps:
      - yarn-build:
          workspace: backend

workflows:
  version: 2
  stack:
    jobs:
      - yarn-install-back
      - node-tests:
          requires:
            - yarn-install-back
      - node-linter:
          requires:
            - yarn-install-back

  heroku_deploy:
    jobs:
      - build
      - heroku/deploy-via-git:
          app-name: cheer-up
          requires:
            - build
          filters:
            branches:
              only: master
